# Définir l'utilisateur sous lequel NGINX s'exécutera
user www-data;

# Spécifier le fichier PID pour le processus NGINX
pid /run/nginx.pid;

# Inclure les modules NGINX activés
include /etc/nginx/modules-enabled/*.conf;

# Configuration des événements pour NGINX
events {
    # Nombre maximum de connexions simultanées par processus de travail
    worker_connections 1024;
    
    # Option pour accepter plusieurs connexions à la fois (désactivée ici)
    # multi_accept on;
}

# Bloc HTTP principal pour la configuration des serveurs
http {
    ##
    # Paramètres de base
    ##

    # Configuration du serveur
    server {
        # Écouter sur le port 443 avec SSL pour IPv4
        listen 443 ssl;
        
        # Écouter sur le port 443 avec SSL pour IPv6
        listen [::]:443 ssl;

        # Définir la racine du serveur web pour WordPress
        root /var/www/html/wordpress;
        
        # Nom de domaine du serveur
        server_name raveriss.42.fr;
        
        # Fichiers d'index par défaut
        index index.php index.html index.htm index.nginx-debian.html;

        # Bloc de localisation pour les requêtes racine
        location / {
            # Inclure les types MIME pour les fichiers
            # MIME : Multipurpose Internet Mail Extensions
            # Inclut le fichier mime.types, qui associe
            # les extensions de fichiers à leurs types MIME (ex : html, css, js, etc.), 
            # indiquant au navigateur le type de contenu servi par le serveur web.
            include /etc/nginx/mime.types;
            
            # Inclure les fichiers de configuration des sites disponibles
            include /etc/nginx/sites-available/*.conf;
            
            # Vérifier l'existence de fichiers, répertoires
            # en cas d'échec renvoyer une erreur 404
            try_files $uri $uri/ =404;
        }

        # Bloc pour traiter les fichiers PHP
        # FastCGI : Fast Common Gateway Interface
        # FastCGI : Protocole pour améliorer les performances 
        # et l'efficacité des communications entre les 
        # serveurs web (comme NGINX ou Apache) et les
        # applications exécutant des scripts dynamiques
        # (par exemple, PHP)."

        location ~ \.php$ {
            # Séparer le chemin et les arguments pour FastCGI
            # Exemple pour : https://example.com/index.php/blog/post/123
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            # - Diviser l'URL en deux parties :
            # 1. ^(.+\.php) -> `/index.php`  (capturé dans `$fastcgi_script_name`)
            # 2. (/.+)$ -> `/blog/post/123` (capturé dans `$fastcgi_path_info`)

            # - Résultat :
            # - `$fastcgi_script_name` = `/index.php`
            # - `$fastcgi_path_info` = `/blog/post/123`  (utilisé pour les arguments PHP)          
            
            
            # Spécifier le fichier script pour FastCGI
            # Qui est egal a root + $fastcgi_script_name
            # Exemple : /var/www/html/wordpress/index.php
            fastcgi_param SCRIPT_FILENAME $request_filename;
            
            # Inclure les paramètres FastCGI par défaut
            include fastcgi_params;
            
            # Déléguer le traitement PHP à WordPress sur le port 9000
            fastcgi_pass wordpress:9000;
            
            # Forcer le paramètre HTTPS pour les requêtes
            fastcgi_param HTTPS on;
        }

        # Configurer les protocoles SSL autorisés
        ssl_protocols TLSv1.2 TLSv1.3;
        
        # Chemin du certificat public SSL
        ssl_certificate /etc/nginx/ssl/inception.crt;
        
        # Chemin de la clé privée SSL
        ssl_certificate_key /etc/nginx/ssl/inception.key;

        # Chemin du fichier de logs des accès
        access_log /var/log/nginx/access.log;
        
        # Chemin du fichier de logs des erreurs
        error_log /var/log/nginx/error.log;

        # Activer la compression Gzip
        gzip on;
    }
}
