# L'utilisateur sous lequel NGINX s'exécute. Utiliser 'www-data' est une bonne pratique
# car cela évite à NGINX de fonctionner avec des privilèges root, ce qui améliore la sécurité.
user www-data;

# Fichier PID utilisé pour identifier le processus NGINX.
# Utile pour démarrer, arrêter ou redémarrer NGINX.
pid /run/nginx.pid;

# Inclut les modules NGINX activés. Les modules sont chargés depuis /etc/nginx/modules-enabled.
include /etc/nginx/modules-enabled/*.conf;

# Section 'events' pour définir le nombre maximum de connexions simultanées.
# 'worker_connections' définit combien de connexions chaque processus peut gérer.
events {
	worker_connections 1024;
	# multi_accept on;
}

http {
	##
	# Paramètres de base pour NGINX.
	##

	server {
		# Écoute sur le port 443 avec SSL activé pour sécuriser les connexions.
		listen 443 ssl;
		listen [::]:443 ssl;

		# Répertoire racine pour les fichiers WordPress. 
		# Bonne pratique : monter ce répertoire dans un volume Docker pour la persistance.
		root /var/www/html/wordpress;

		# Nom de domaine du serveur, défini via une variable d'environnement pour plus de flexibilité.
		server_name ${DOMAIN_NAME};

		# Fichiers à servir par défaut lorsque la racine du site est demandée.
		index index.php index.html index.htm index.nginx-debian.html;

		# Gestion des requêtes à la racine du site.
		# 'try_files' tente de servir les fichiers directement, sinon renvoie une erreur 404.
		location / {
			# Inclut les types MIME et d'autres fichiers de configuration pour gérer les extensions de fichiers.
			include /etc/nginx/mime.types;
			include /etc/nginx/sites-available/*.conf;

			# Tente de trouver le fichier correspondant à la requête, sinon renvoie une erreur 404.
			try_files $uri $uri/ =404;
		}

		# Gestion des fichiers PHP.
		# Les requêtes PHP sont passées à PHP-FPM, qui fonctionne sur le port 9000 du conteneur 'wordpress'.
		location ~ \.php$ {
			# Divise le chemin pour que FastCGI comprenne les requêtes PHP.
			fastcgi_split_path_info ^(.+\.php)(/.+)$;

			# Indique où trouver le fichier PHP à exécuter.
			fastcgi_param SCRIPT_FILENAME $request_filename;

			# Inclut les paramètres par défaut de FastCGI pour PHP.
			include fastcgi_params;

			# Redirige les requêtes vers le conteneur WordPress où PHP-FPM est actif.
			fastcgi_pass wordpress:9000;

			# Active HTTPS pour les requêtes PHP.
			fastcgi_param HTTPS on;
		}

		# Définit les protocoles TLS autorisés. Utiliser uniquement TLSv1.2 et TLSv1.3 pour des raisons de sécurité.
		ssl_protocols TLSv1.2 TLSv1.3;

		# Chemins du certificat SSL et de la clé privée pour sécuriser les connexions.
		# Bonne pratique : stocker ces fichiers dans un volume sécurisé ou utiliser des certificats Let's Encrypt.
		ssl_certificate /etc/nginx/ssl/inception.crt;
		ssl_certificate_key /etc/nginx/ssl/inception.key;

		# Définition des chemins pour les fichiers de logs d'accès et d'erreur.
		# Les logs sont essentiels pour le suivi des requêtes et des erreurs.
		access_log /var/log/nginx/access.log;
		error_log /var/log/nginx/error.log;

		# Active la compression Gzip pour améliorer les performances en réduisant la taille des fichiers envoyés.
		gzip on;
	}
}
